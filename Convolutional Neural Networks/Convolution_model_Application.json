{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Convolutional Neural Networks: Application\n",
    "\n",
    "Welcome to Course 4's second assignment! In this notebook, you will:\n",
    "\n",
    "- Create a mood classifer using the TF Keras Sequential API\n",
    "- Build a ConvNet to identify sign language digits using the TF Keras Functional API\n",
    "\n",
    "**After this assignment you will be able to:**\n",
    "\n",
    "- Build and train a ConvNet in TensorFlow for a __binary__ classification problem\n",
    "- Build and train a ConvNet in TensorFlow for a __multiclass__ classification problem\n",
    "- Explain different use cases for the Sequential and Functional APIs\n",
    "\n",
    "To complete this assignment, you should already be familiar with TensorFlow. If you are not, please refer back to the **TensorFlow Tutorial** of the third week of Course 2 (\"**Improving deep neural networks**\")."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Table of Contents\n",
    "\n",
    "- [1 - Packages](#1)\n",
    "    - [1.1 - Load the Data and Split the Data into Train/Test Sets](#1-1)\n",
    "- [2 - Layers in TF Keras](#2)\n",
    "- [3 - The Sequential API](#3)\n",
    "    - [3.1 - Create the Sequential Model](#3-1)\n",
    "        - [Exercise 1 - happyModel](#ex-1)\n",
    "    - [3.2 - Train and Evaluate the Model](#3-2)\n",
    "- [4 - The Functional API](#4)\n",
    "    - [4.1 - Load the SIGNS Dataset](#4-1)\n",
    "    - [4.2 - Split the Data into Train/Test Sets](#4-2)\n",
    "    - [4.3 - Forward Propagation](#4-3)\n",
    "        - [Exercise 2 - convolutional_model](#ex-2)\n",
    "    - [4.4 - Train the Model](#4-4)\n",
    "- [5 - History Object](#5)\n",
    "- [6 - Bibliography](#6)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='1'></a>\n",
    "## 1 - Packages\n",
    "\n",
    "As usual, begin by loading in the packages."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "import numpy as np\n",
    "import h5py\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.pyplot import imread\n",
    "import scipy\n",
    "from PIL import Image\n",
    "import pandas as pd\n",
    "import tensorflow as tf\n",
    "import tensorflow.keras.layers as tfl\n",
    "from tensorflow.python.framework import ops\n",
    "from cnn_utils import *\n",
    "from test_utils import summary, comparator\n",
    "\n",
    "%matplotlib inline\n",
    "np.random.seed(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='1-1'></a>\n",
    "### 1.1 - Load the Data and Split the Data into Train/Test Sets\n",
    "\n",
    "You'll be using the Happy House dataset for this part of the assignment, which contains images of peoples' faces. Your task will be to build a ConvNet that determines whether the people in the images are smiling or not -- because they only get to enter the house if they're smiling!  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of training examples = 600\n",
      "number of test examples = 150\n",
      "X_train shape: (600, 64, 64, 3)\n",
      "Y_train shape: (600, 1)\n",
      "X_test shape: (150, 64, 64, 3)\n",
      "Y_test shape: (150, 1)\n"
     ]
    }
   ],
   "source": [
    "X_train_orig, Y_train_orig, X_test_orig, Y_test_orig, classes = load_happy_dataset()\n",
    "\n",
    "# Normalize image vectors\n",
    "X_train = X_train_orig/255.\n",
    "X_test = X_test_orig/255.\n",
    "\n",
    "# Reshape\n",
    "Y_train = Y_train_orig.T\n",
    "Y_test = Y_test_orig.T\n",
    "\n",
    "print (\"number of training examples = \" + str(X_train.shape[0]))\n",
    "print (\"number of test examples = \" + str(X_test.shape[0]))\n",
    "print (\"X_train shape: \" + str(X_train.shape))\n",
    "print (\"Y_train shape: \" + str(Y_train.shape))\n",
    "print (\"X_test shape: \" + str(X_test.shape))\n",
    "print (\"Y_test shape: \" + str(Y_test.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can display the images contained in the dataset. Images are **64x64** pixels in RGB format (3 channels)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0]\n"
     ]
    }
   ],
   "source": [
    "index = 170\n",
    "plt.imshow(X_train_orig[index]) #display sample training image\n",
    "plt.show()\n",
    "print(Y_train[index])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='2'></a>\n",
    "## 2 - Layers in TF Keras \n",
    "\n",
    "In the previous assignment, you created layers manually in numpy. In TF Keras, you don't have to write code directly to create layers. Rather, TF Keras has pre-defined layers you can use. \n",
    "\n",
    "When you create a layer in TF Keras, you are creating a function that takes some input and transforms it into an output you can reuse later. Nice and easy! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='3'></a>\n",
    "## 3 - The Sequential API\n",
    "\n",
    "In the previous assignment, you built helper functions using `numpy` to understand the mechanics behind convolutional neural networks. Most practical applications of deep learning today are built using programming frameworks, which have many built-in functions you can simply call. Keras is a high-level abstraction built on top of TensorFlow, which allows for even more simplified and optimized model creation and training. \n",
    "\n",
    "For the first part of this assignment, you'll create a model using TF Keras' Sequential API, which allows you to build layer by layer, and is ideal for building models where each layer has **exactly one** input tensor and **one** output tensor. \n",
    "\n",
    "As you'll see, using the Sequential API is simple and straightforward, but is only appropriate for simpler, more straightforward tasks. Later in this notebook you'll spend some time building with a more flexible, powerful alternative: the Functional API. \n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='3-1'></a>\n",
    "### 3.1 - Create the Sequential Model\n",
    "\n",
    "As mentioned earlier, the TensorFlow Keras Sequential API can be used to build simple models with layer operations that proceed in a sequential order. \n",
    "\n",
    "You can also add layers incrementally to a Sequential model with the `.add()` method, or remove them using the `.pop()` method, much like you would in a regular Python list.\n",
    "\n",
    "Actually, you can think of a Sequential model as behaving like a list of layers. Like Python lists, Sequential layers are ordered, and the order in which they are specified matters.  If your model is non-linear or contains layers with multiple inputs or outputs, a Sequential model wouldn't be the right choice!\n",
    "\n",
    "For any layer construction in Keras, you'll need to specify the input shape in advance. This is because in Keras, the shape of the weights is based on the shape of the inputs. The weights are only created when the model first sees some input data. Sequential models can be created by passing a list of layers to the Sequential constructor, like you will do in the next assignment.\n",
    "\n",
    "<a name='ex-1'></a>\n",
    "### Exercise 1 - happyModel\n",
    "\n",
    "Implement the `happyModel` function below to build the following model: `ZEROPAD2D -> CONV2D -> BATCHNORM -> RELU -> MAXPOOL -> FLATTEN -> DENSE`. Take help from [tf.keras.layers](https://www.tensorflow.org/api_docs/python/tf/keras/layers) \n",
    "\n",
    "Also, plug in the following parameters for all the steps:\n",
    "\n",
    " - [ZeroPadding2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/ZeroPadding2D): padding 3, input shape 64 x 64 x 3\n",
    " - [Conv2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D): Use 32 7x7 filters, stride 1\n",
    " - [BatchNormalization](https://www.tensorflow.org/api_docs/python/tf/keras/layers/BatchNormalization): for axis 3\n",
    " - [ReLU](https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU)\n",
    " - [MaxPool2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/MaxPool2D): Using default parameters\n",
    " - [Flatten](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Flatten) the previous output.\n",
    " - Fully-connected ([Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense)) layer: Apply a fully connected layer with 1 neuron and a sigmoid activation. \n",
    " \n",
    " \n",
    " **Hint:**\n",
    " \n",
    " Use **tfl** as shorthand for **tensorflow.keras.layers**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "95d28b191f257bdd5b70c7b8952559d5",
     "grade": false,
     "grade_id": "cell-0e56d3fc28b69aec",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: happyModel\n",
    "\n",
    "def happyModel():\n",
    "    \"\"\"\n",
    "    Implements the forward propagation for the binary classification model:\n",
    "    ZEROPAD2D -> CONV2D -> BATCHNORM -> RELU -> MAXPOOL -> FLATTEN -> DENSE\n",
    "    \n",
    "    Note that for simplicity and grading purposes, you'll hard-code all the values\n",
    "    such as the stride and kernel (filter) sizes. \n",
    "    Normally, functions should take these values as function parameters.\n",
    "    \n",
    "    Arguments:\n",
    "    None\n",
    "\n",
    "    Returns:\n",
    "    model -- TF Keras model (object containing the information for the entire training process) \n",
    "    \"\"\"\n",
    "    model = tf.keras.Sequential([\n",
    "            ## ZeroPadding2D with padding 3, input shape of 64 x 64 x 3\n",
    "            tfl.ZeroPadding2D(padding=3, input_shape=(64,64,3)),\n",
    "            ## Conv2D with 32 7x7 filters and stride of 1\n",
    "            tfl.Conv2D(filters=32, kernel_size=(7,7), strides=(1,1)),\n",
    "            ## BatchNormalization for axis 3\n",
    "            tfl.BatchNormalization(axis=3),\n",
    "            ## ReLU\n",
    "            tfl.ReLU(),\n",
    "            ## Max Pooling 2D with default parameters\n",
    "            tfl.MaxPool2D(),\n",
    "            ## Flatten layer\n",
    "            tfl.Flatten(),\n",
    "            ## Dense layer with 1 unit for output & 'sigmoid' activation\n",
    "            tfl.Dense(units=1, activation=\"sigmoid\")\n",
    "            # YOUR CODE STARTS HERE\n",
    "            \n",
    "            \n",
    "            # YOUR CODE ENDS HERE\n",
    "        ])\n",
    "    \n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "8d3575c950e2e78149be2d05d671c80d",
     "grade": true,
     "grade_id": "cell-e3e1046e5c33d775",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['ZeroPadding2D', (None, 70, 70, 3), 0, ((3, 3), (3, 3))]\n",
      "['Conv2D', (None, 64, 64, 32), 4736, 'valid', 'linear', 'GlorotUniform']\n",
      "['BatchNormalization', (None, 64, 64, 32), 128]\n",
      "['ReLU', (None, 64, 64, 32), 0]\n",
      "['MaxPooling2D', (None, 32, 32, 32), 0, (2, 2), (2, 2), 'valid']\n",
      "['Flatten', (None, 32768), 0]\n",
      "['Dense', (None, 1), 32769, 'sigmoid']\n",
      "\u001b[32mAll tests passed!\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "happy_model = happyModel()\n",
    "# Print a summary for each layer\n",
    "for layer in summary(happy_model):\n",
    "    print(layer)\n",
    "    \n",
    "output = [['ZeroPadding2D', (None, 70, 70, 3), 0, ((3, 3), (3, 3))],\n",
    "            ['Conv2D', (None, 64, 64, 32), 4736, 'valid', 'linear', 'GlorotUniform'],\n",
    "            ['BatchNormalization', (None, 64, 64, 32), 128],\n",
    "            ['ReLU', (None, 64, 64, 32), 0],\n",
    "            ['MaxPooling2D', (None, 32, 32, 32), 0, (2, 2), (2, 2), 'valid'],\n",
    "            ['Flatten', (None, 32768), 0],\n",
    "            ['Dense', (None, 1), 32769, 'sigmoid']]\n",
    "    \n",
    "comparator(summary(happy_model), output)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that your model is created, you can compile it for training with an optimizer and loss of your choice. When the string `accuracy` is specified as a metric, the type of accuracy used will be automatically converted based on the loss function used. This is one of the many optimizations built into TensorFlow that make your life easier! If you'd like to read more on how the compiler operates, check the docs [here](https://www.tensorflow.org/api_docs/python/tf/keras/Model#compile)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "happy_model.compile(optimizer='adam',\n",
    "                   loss='binary_crossentropy',\n",
    "                   metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's time to check your model's parameters with the `.summary()` method. This will display the types of layers you have, the shape of the outputs, and how many parameters are in each layer. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "zero_padding2d (ZeroPadding2 (None, 70, 70, 3)         0         \n",
      "_________________________________________________________________\n",
      "conv2d (Conv2D)              (None, 64, 64, 32)        4736      \n",
      "_________________________________________________________________\n",
      "batch_normalization (BatchNo (None, 64, 64, 32)        128       \n",
      "_________________________________________________________________\n",
      "re_lu (ReLU)                 (None, 64, 64, 32)        0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d (MaxPooling2D) (None, 32, 32, 32)        0         \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 32768)             0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 1)                 32769     \n",
      "=================================================================\n",
      "Total params: 37,633\n",
      "Trainable params: 37,569\n",
      "Non-trainable params: 64\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "happy_model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='3-2'></a>\n",
    "### 3.2 - Train and Evaluate the Model\n",
    "\n",
    "After creating the model, compiling it with your choice of optimizer and loss function, and doing a sanity check on its contents, you are now ready to build! \n",
    "\n",
    "Simply call `.fit()` to train. That's it! No need for mini-batching, saving, or complex backpropagation computations. That's all been done for you, as you're using a TensorFlow dataset with the batches specified already. You do have the option to specify epoch number or minibatch size if you like (for example, in the case of an un-batched dataset)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "38/38 [==============================] - 4s 98ms/step - loss: 1.1448 - accuracy: 0.7117\n",
      "Epoch 2/10\n",
      "38/38 [==============================] - 4s 97ms/step - loss: 0.2103 - accuracy: 0.9183\n",
      "Epoch 3/10\n",
      "38/38 [==============================] - 4s 95ms/step - loss: 0.2325 - accuracy: 0.9050\n",
      "Epoch 4/10\n",
      "38/38 [==============================] - 4s 97ms/step - loss: 0.1158 - accuracy: 0.9633\n",
      "Epoch 5/10\n",
      "38/38 [==============================] - 4s 95ms/step - loss: 0.1232 - accuracy: 0.9417\n",
      "Epoch 6/10\n",
      "38/38 [==============================] - 4s 95ms/step - loss: 0.0995 - accuracy: 0.9650\n",
      "Epoch 7/10\n",
      "38/38 [==============================] - 4s 97ms/step - loss: 0.0871 - accuracy: 0.9683\n",
      "Epoch 8/10\n",
      "38/38 [==============================] - 4s 95ms/step - loss: 0.1124 - accuracy: 0.9600\n",
      "Epoch 9/10\n",
      "38/38 [==============================] - 4s 95ms/step - loss: 0.1344 - accuracy: 0.9500\n",
      "Epoch 10/10\n",
      "38/38 [==============================] - 4s 95ms/step - loss: 0.0745 - accuracy: 0.9800\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<tensorflow.python.keras.callbacks.History at 0x7f13682d6e50>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "happy_model.fit(X_train, Y_train, epochs=10, batch_size=16)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After that completes, just use `.evaluate()` to evaluate against your test set. This function will print the value of the loss function and the performance metrics specified during the compilation of the model. In this case, the `binary_crossentropy` and the `accuracy` respectively."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5/5 [==============================] - 0s 36ms/step - loss: 0.4155 - accuracy: 0.8600\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[0.41546010971069336, 0.8600000143051147]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "happy_model.evaluate(X_test, Y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Easy, right? But what if you need to build a model with shared layers, branches, or multiple inputs and outputs? This is where Sequential, with its beautifully simple yet limited functionality, won't be able to help you. \n",
    "\n",
    "Next up: Enter the Functional API, your slightly more complex, highly flexible friend.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='4'></a>\n",
    "## 4 - The Functional API"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Welcome to the second half of the assignment, where you'll use Keras' flexible [Functional API](https://www.tensorflow.org/guide/keras/functional) to build a ConvNet that can differentiate between 6 sign language digits. \n",
    "\n",
    "The Functional API can handle models with non-linear topology, shared layers, as well as layers with multiple inputs or outputs. Imagine that, where the Sequential API requires the model to move in a linear fashion through its layers, the Functional API allows much more flexibility. Where Sequential is a straight line, a Functional model is a graph, where the nodes of the layers can connect in many more ways than one. \n",
    "\n",
    "In the visual example below, the one possible direction of the movement Sequential model is shown in contrast to a skip connection, which is just one of the many ways a Functional model can be constructed. A skip connection, as you might have guessed, skips some layer in the network and feeds the output to a later layer in the network. Don't worry, you'll be spending more time with skip connections very soon! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"images/seq_vs_func.png\" style=\"width:350px;height:200px;\">"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='4-1'></a>\n",
    "### 4.1 - Load the SIGNS Dataset\n",
    "\n",
    "As a reminder, the SIGNS dataset is a collection of 6 signs representing numbers from 0 to 5."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Loading the data (signs)\n",
    "X_train_orig, Y_train_orig, X_test_orig, Y_test_orig, classes = load_signs_dataset()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"images/SIGNS.png\" style=\"width:800px;height:300px;\">\n",
    "\n",
    "The next cell will show you an example of a labelled image in the dataset. Feel free to change the value of `index` below and re-run to see different examples. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y = 1\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Example of an image from the dataset\n",
    "index = 7\n",
    "plt.imshow(X_train_orig[index])\n",
    "print (\"y = \" + str(np.squeeze(Y_train_orig[:, index])))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='4-2'></a>\n",
    "### 4.2 - Split the Data into Train/Test Sets\n",
    "\n",
    "In Course 2, you built a fully-connected network for this dataset. But since this is an image dataset, it is more natural to apply a ConvNet to it.\n",
    "\n",
    "To get started, let's examine the shapes of your data. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of training examples = 1080\n",
      "number of test examples = 120\n",
      "X_train shape: (1080, 64, 64, 3)\n",
      "Y_train shape: (1080, 6)\n",
      "X_test shape: (120, 64, 64, 3)\n",
      "Y_test shape: (120, 6)\n"
     ]
    }
   ],
   "source": [
    "X_train = X_train_orig/255.\n",
    "X_test = X_test_orig/255.\n",
    "Y_train = convert_to_one_hot(Y_train_orig, 6).T\n",
    "Y_test = convert_to_one_hot(Y_test_orig, 6).T\n",
    "print (\"number of training examples = \" + str(X_train.shape[0]))\n",
    "print (\"number of test examples = \" + str(X_test.shape[0]))\n",
    "print (\"X_train shape: \" + str(X_train.shape))\n",
    "print (\"Y_train shape: \" + str(Y_train.shape))\n",
    "print (\"X_test shape: \" + str(X_test.shape))\n",
    "print (\"Y_test shape: \" + str(Y_test.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='4-3'></a>\n",
    "### 4.3 - Forward Propagation\n",
    "\n",
    "In TensorFlow, there are built-in functions that implement the convolution steps for you. By now, you should be familiar with how TensorFlow builds computational graphs. In the [Functional API](https://www.tensorflow.org/guide/keras/functional), you create a graph of layers. This is what allows such great flexibility.\n",
    "\n",
    "However, the following model could also be defined using the Sequential API since the information flow is on a single line. But don't deviate. What we want you to learn is to use the functional API.\n",
    "\n",
    "Begin building your graph of layers by creating an input node that functions as a callable object:\n",
    "\n",
    "- **input_img = tf.keras.Input(shape=input_shape):** \n",
    "\n",
    "Then, create a new node in the graph of layers by calling a layer on the `input_img` object: \n",
    "\n",
    "- **tf.keras.layers.Conv2D(filters= ... , kernel_size= ... , padding='same')(input_img):** Read the full documentation on [Conv2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D).\n",
    "\n",
    "- **tf.keras.layers.MaxPool2D(pool_size=(f, f), strides=(s, s), padding='same'):** `MaxPool2D()` downsamples your input using a window of size (f, f) and strides of size (s, s) to carry out max pooling over each window.  For max pooling, you usually operate on a single example at a time and a single channel at a time. Read the full documentation on [MaxPool2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/MaxPool2D).\n",
    "\n",
    "- **tf.keras.layers.ReLU():** computes the elementwise ReLU of Z (which can be any shape). You can read the full documentation on [ReLU](https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU).\n",
    "\n",
    "- **tf.keras.layers.Flatten()**: given a tensor \"P\", this function takes each training (or test) example in the batch and flattens it into a 1D vector.  \n",
    "\n",
    "    * If a tensor P has the shape (batch_size,h,w,c), it returns a flattened tensor with shape (batch_size, k), where $k=h \\times w \\times c$.  \"k\" equals the product of all the dimension sizes other than the first dimension.\n",
    "    \n",
    "    * For example, given a tensor with dimensions [100, 2, 3, 4], it flattens the tensor to be of shape [100, 24], where 24 = 2 * 3 * 4.  You can read the full documentation on [Flatten](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Flatten).\n",
    "\n",
    "- **tf.keras.layers.Dense(units= ... , activation='softmax')(F):** given the flattened input F, it returns the output computed using a fully connected layer. You can read the full documentation on [Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense).\n",
    "\n",
    "In the last function above (`tf.keras.layers.Dense()`), the fully connected layer automatically initializes weights in the graph and keeps on training them as you train the model. Hence, you did not need to initialize those weights when initializing the parameters.\n",
    "\n",
    "Lastly, before creating the model, you'll need to define the output using the last of the function's compositions (in this example, a Dense layer): \n",
    "\n",
    "- **outputs = tf.keras.layers.Dense(units=6, activation='softmax')(F)**\n",
    "\n",
    "\n",
    "#### Window, kernel, filter, pool\n",
    "\n",
    "The words \"kernel\" and \"filter\" are used to refer to the same thing. The word \"filter\" accounts for the amount of \"kernels\" that will be used in a single convolution layer. \"Pool\" is the name of the operation that takes the max or average value of the kernels. \n",
    "\n",
    "This is why the parameter `pool_size` refers to `kernel_size`, and you use `(f,f)` to refer to the filter size. \n",
    "\n",
    "Pool size and kernel size refer to the same thing in different objects - They refer to the shape of the window where the operation takes place. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='ex-2'></a>\n",
    "### Exercise 2 - convolutional_model\n",
    "\n",
    "Implement the `convolutional_model` function below to build the following model: `CONV2D -> RELU -> MAXPOOL -> CONV2D -> RELU -> MAXPOOL -> FLATTEN -> DENSE`. Use the functions above! \n",
    "\n",
    "Also, plug in the following parameters for all the steps:\n",
    "\n",
    " - [Conv2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv2D): Use 8 4 by 4 filters, stride 1, padding is \"SAME\"\n",
    " - [ReLU](https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU)\n",
    " - [MaxPool2D](https://www.tensorflow.org/api_docs/python/tf/keras/layers/MaxPool2D): Use an 8 by 8 filter size and an 8 by 8 stride, padding is \"SAME\"\n",
    " - **Conv2D**: Use 16 2 by 2 filters, stride 1, padding is \"SAME\"\n",
    " - **ReLU**\n",
    " - **MaxPool2D**: Use a 4 by 4 filter size and a 4 by 4 stride, padding is \"SAME\"\n",
    " - [Flatten](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Flatten) the previous output.\n",
    " - Fully-connected ([Dense](https://www.tensorflow.org/api_docs/python/tf/keras/layers/Dense)) layer: Apply a fully connected layer with 6 neurons and a softmax activation. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "deletable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "f58643806aa8380c96225fc8b4c5e7aa",
     "grade": false,
     "grade_id": "cell-dac51744a9e03f51",
     "locked": false,
     "schema_version": 3,
     "solution": true,
     "task": false
    }
   },
   "outputs": [],
   "source": [
    "# GRADED FUNCTION: convolutional_model\n",
    "\n",
    "def convolutional_model(input_shape):\n",
    "    \"\"\"\n",
    "    Implements the forward propagation for the model:\n",
    "    CONV2D -> RELU -> MAXPOOL -> CONV2D -> RELU -> MAXPOOL -> FLATTEN -> DENSE\n",
    "    \n",
    "    Note that for simplicity and grading purposes, you'll hard-code some values\n",
    "    such as the stride and kernel (filter) sizes. \n",
    "    Normally, functions should take these values as function parameters.\n",
    "    \n",
    "    Arguments:\n",
    "    input_img -- input dataset, of shape (input_shape)\n",
    "\n",
    "    Returns:\n",
    "    model -- TF Keras model (object containing the information for the entire training process) \n",
    "    \"\"\"\n",
    "\n",
    "    input_img = tf.keras.Input(shape=input_shape)\n",
    "    ## CONV2D: 8 filters 4x4, stride of 1, padding 'SAME'\n",
    "    Z1 = tfl.Conv2D(filters=8, kernel_size=(4,4), strides=(1,1), padding=\"same\")(input_img)\n",
    "    ## RELU\n",
    "    A1 = tfl.ReLU()(Z1)\n",
    "    ## MAXPOOL: window 8x8, stride 8, padding 'SAME'\n",
    "    P1 = tfl.MaxPool2D(pool_size=(8,8), strides=(8,8), padding=\"same\")(A1)\n",
    "    ## CONV2D: 16 filters 2x2, stride 1, padding 'SAME'\n",
    "    Z2 = tfl.Conv2D(filters=16, kernel_size=(2,2), strides=(1,1), padding=\"same\")(P1)\n",
    "    ## RELU\n",
    "    A2 = tfl.ReLU()(Z2)\n",
    "    ## MAXPOOL: window 4x4, stride 4, padding 'SAME'\n",
    "    P2 = tfl.MaxPool2D(pool_size=(4,4), strides=(4,4), padding=\"same\")(A2)\n",
    "    ## FLATTEN\n",
    "    F = tfl.Flatten()(P2)\n",
    "    ## Dense layer\n",
    "    ## 6 neurons in output layer. Hint: one of the arguments should be \"activation='softmax'\" \n",
    "    outputs = tfl.Dense(units=6, activation=\"softmax\")(F)\n",
    "    # YOUR CODE STARTS HERE\n",
    "    \n",
    "    \n",
    "    # YOUR CODE ENDS HERE\n",
    "    model = tf.keras.Model(inputs=input_img, outputs=outputs)\n",
    "    return model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "deletable": false,
    "editable": false,
    "nbgrader": {
     "cell_type": "code",
     "checksum": "483d626949930a0b0ef20997e7c6ba72",
     "grade": true,
     "grade_id": "cell-45d22e92042174c9",
     "locked": true,
     "points": 10,
     "schema_version": 3,
     "solution": false,
     "task": false
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"functional_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_2 (InputLayer)         [(None, 64, 64, 3)]       0         \n",
      "_________________________________________________________________\n",
      "conv2d_3 (Conv2D)            (None, 64, 64, 8)         392       \n",
      "_________________________________________________________________\n",
      "re_lu_3 (ReLU)               (None, 64, 64, 8)         0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_3 (MaxPooling2 (None, 8, 8, 8)           0         \n",
      "_________________________________________________________________\n",
      "conv2d_4 (Conv2D)            (None, 8, 8, 16)          528       \n",
      "_________________________________________________________________\n",
      "re_lu_4 (ReLU)               (None, 8, 8, 16)          0         \n",
      "_________________________________________________________________\n",
      "max_pooling2d_4 (MaxPooling2 (None, 2, 2, 16)          0         \n",
      "_________________________________________________________________\n",
      "flatten_2 (Flatten)          (None, 64)                0         \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 6)                 390       \n",
      "=================================================================\n",
      "Total params: 1,310\n",
      "Trainable params: 1,310\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "\u001b[32mAll tests passed!\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "conv_model = convolutional_model((64, 64, 3))\n",
    "conv_model.compile(optimizer='adam',\n",
    "                  loss='categorical_crossentropy',\n",
    "                  metrics=['accuracy'])\n",
    "conv_model.summary()\n",
    "    \n",
    "output = [['InputLayer', [(None, 64, 64, 3)], 0],\n",
    "        ['Conv2D', (None, 64, 64, 8), 392, 'same', 'linear', 'GlorotUniform'],\n",
    "        ['ReLU', (None, 64, 64, 8), 0],\n",
    "        ['MaxPooling2D', (None, 8, 8, 8), 0, (8, 8), (8, 8), 'same'],\n",
    "        ['Conv2D', (None, 8, 8, 16), 528, 'same', 'linear', 'GlorotUniform'],\n",
    "        ['ReLU', (None, 8, 8, 16), 0],\n",
    "        ['MaxPooling2D', (None, 2, 2, 16), 0, (4, 4), (4, 4), 'same'],\n",
    "        ['Flatten', (None, 64), 0],\n",
    "        ['Dense', (None, 6), 390, 'softmax']]\n",
    "    \n",
    "comparator(summary(conv_model), output)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Both the Sequential and Functional APIs return a TF Keras model object. The only difference is how inputs are handled inside the object model! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='4-4'></a>\n",
    "### 4.4 - Train the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 1.7916 - accuracy: 0.1870 - val_loss: 1.7873 - val_accuracy: 0.2083\n",
      "Epoch 2/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.7863 - accuracy: 0.2398 - val_loss: 1.7835 - val_accuracy: 0.2833\n",
      "Epoch 3/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 1.7825 - accuracy: 0.2639 - val_loss: 1.7798 - val_accuracy: 0.2583\n",
      "Epoch 4/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 1.7787 - accuracy: 0.2565 - val_loss: 1.7750 - val_accuracy: 0.3167\n",
      "Epoch 5/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.7736 - accuracy: 0.3130 - val_loss: 1.7673 - val_accuracy: 0.3333\n",
      "Epoch 6/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 1.7655 - accuracy: 0.2991 - val_loss: 1.7588 - val_accuracy: 0.3333\n",
      "Epoch 7/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 1.7582 - accuracy: 0.3324 - val_loss: 1.7509 - val_accuracy: 0.3667\n",
      "Epoch 8/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 1.7497 - accuracy: 0.3574 - val_loss: 1.7406 - val_accuracy: 0.4500\n",
      "Epoch 9/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.7392 - accuracy: 0.3667 - val_loss: 1.7272 - val_accuracy: 0.4417\n",
      "Epoch 10/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 1.7257 - accuracy: 0.4028 - val_loss: 1.7102 - val_accuracy: 0.4583\n",
      "Epoch 11/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 1.7107 - accuracy: 0.4296 - val_loss: 1.6924 - val_accuracy: 0.4917\n",
      "Epoch 12/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 1.6942 - accuracy: 0.4398 - val_loss: 1.6731 - val_accuracy: 0.4833\n",
      "Epoch 13/100\n",
      "17/17 [==============================] - 2s 112ms/step - loss: 1.6757 - accuracy: 0.4389 - val_loss: 1.6523 - val_accuracy: 0.4833\n",
      "Epoch 14/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 1.6553 - accuracy: 0.4417 - val_loss: 1.6291 - val_accuracy: 0.5000\n",
      "Epoch 15/100\n",
      "17/17 [==============================] - 2s 112ms/step - loss: 1.6323 - accuracy: 0.4537 - val_loss: 1.6041 - val_accuracy: 0.5167\n",
      "Epoch 16/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.6084 - accuracy: 0.4648 - val_loss: 1.5740 - val_accuracy: 0.5417\n",
      "Epoch 17/100\n",
      "17/17 [==============================] - 2s 101ms/step - loss: 1.5825 - accuracy: 0.4741 - val_loss: 1.5461 - val_accuracy: 0.5333\n",
      "Epoch 18/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.5555 - accuracy: 0.4759 - val_loss: 1.5139 - val_accuracy: 0.5333\n",
      "Epoch 19/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 1.5259 - accuracy: 0.4963 - val_loss: 1.4782 - val_accuracy: 0.5500\n",
      "Epoch 20/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 1.4928 - accuracy: 0.5046 - val_loss: 1.4390 - val_accuracy: 0.6000\n",
      "Epoch 21/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 1.4616 - accuracy: 0.5120 - val_loss: 1.4033 - val_accuracy: 0.5833\n",
      "Epoch 22/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.4266 - accuracy: 0.5278 - val_loss: 1.3640 - val_accuracy: 0.6000\n",
      "Epoch 23/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.3898 - accuracy: 0.5491 - val_loss: 1.3245 - val_accuracy: 0.6083\n",
      "Epoch 24/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.3512 - accuracy: 0.5694 - val_loss: 1.2847 - val_accuracy: 0.6083\n",
      "Epoch 25/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 1.3131 - accuracy: 0.5815 - val_loss: 1.2434 - val_accuracy: 0.6083\n",
      "Epoch 26/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.2763 - accuracy: 0.5926 - val_loss: 1.2055 - val_accuracy: 0.6083\n",
      "Epoch 27/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 1.2410 - accuracy: 0.6065 - val_loss: 1.1690 - val_accuracy: 0.6250\n",
      "Epoch 28/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.2066 - accuracy: 0.6148 - val_loss: 1.1352 - val_accuracy: 0.6500\n",
      "Epoch 29/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 1.1732 - accuracy: 0.6250 - val_loss: 1.1031 - val_accuracy: 0.6667\n",
      "Epoch 30/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.1413 - accuracy: 0.6343 - val_loss: 1.0727 - val_accuracy: 0.6667\n",
      "Epoch 31/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.1106 - accuracy: 0.6491 - val_loss: 1.0440 - val_accuracy: 0.6667\n",
      "Epoch 32/100\n",
      "17/17 [==============================] - 2s 101ms/step - loss: 1.0818 - accuracy: 0.6583 - val_loss: 1.0163 - val_accuracy: 0.6500\n",
      "Epoch 33/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.0544 - accuracy: 0.6620 - val_loss: 0.9904 - val_accuracy: 0.6500\n",
      "Epoch 34/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 1.0286 - accuracy: 0.6685 - val_loss: 0.9662 - val_accuracy: 0.6750\n",
      "Epoch 35/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 1.0044 - accuracy: 0.6750 - val_loss: 0.9433 - val_accuracy: 0.6667\n",
      "Epoch 36/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 0.9816 - accuracy: 0.6815 - val_loss: 0.9215 - val_accuracy: 0.6833\n",
      "Epoch 37/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.9602 - accuracy: 0.6824 - val_loss: 0.9011 - val_accuracy: 0.6833\n",
      "Epoch 38/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 0.9401 - accuracy: 0.6870 - val_loss: 0.8821 - val_accuracy: 0.6833\n",
      "Epoch 39/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.9213 - accuracy: 0.6926 - val_loss: 0.8643 - val_accuracy: 0.6833\n",
      "Epoch 40/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.9034 - accuracy: 0.6981 - val_loss: 0.8475 - val_accuracy: 0.7000\n",
      "Epoch 41/100\n",
      "17/17 [==============================] - 2s 112ms/step - loss: 0.8867 - accuracy: 0.7046 - val_loss: 0.8317 - val_accuracy: 0.7000\n",
      "Epoch 42/100\n",
      "17/17 [==============================] - 2s 112ms/step - loss: 0.8708 - accuracy: 0.7074 - val_loss: 0.8169 - val_accuracy: 0.7000\n",
      "Epoch 43/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.8559 - accuracy: 0.7139 - val_loss: 0.8028 - val_accuracy: 0.7083\n",
      "Epoch 44/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 0.8417 - accuracy: 0.7185 - val_loss: 0.7899 - val_accuracy: 0.7083\n",
      "Epoch 45/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 0.8283 - accuracy: 0.7185 - val_loss: 0.7777 - val_accuracy: 0.7083\n",
      "Epoch 46/100\n",
      "17/17 [==============================] - 2s 112ms/step - loss: 0.8155 - accuracy: 0.7213 - val_loss: 0.7660 - val_accuracy: 0.7167\n",
      "Epoch 47/100\n",
      "17/17 [==============================] - 2s 112ms/step - loss: 0.8035 - accuracy: 0.7250 - val_loss: 0.7549 - val_accuracy: 0.7167\n",
      "Epoch 48/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.7919 - accuracy: 0.7278 - val_loss: 0.7440 - val_accuracy: 0.7167\n",
      "Epoch 49/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.7810 - accuracy: 0.7306 - val_loss: 0.7340 - val_accuracy: 0.7167\n",
      "Epoch 50/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 0.7702 - accuracy: 0.7343 - val_loss: 0.7243 - val_accuracy: 0.7167\n",
      "Epoch 51/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.7603 - accuracy: 0.7398 - val_loss: 0.7154 - val_accuracy: 0.7250\n",
      "Epoch 52/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 0.7507 - accuracy: 0.7435 - val_loss: 0.7071 - val_accuracy: 0.7417\n",
      "Epoch 53/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 0.7416 - accuracy: 0.7481 - val_loss: 0.6994 - val_accuracy: 0.7500\n",
      "Epoch 54/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.7327 - accuracy: 0.7500 - val_loss: 0.6918 - val_accuracy: 0.7500\n",
      "Epoch 55/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.7243 - accuracy: 0.7537 - val_loss: 0.6849 - val_accuracy: 0.7500\n",
      "Epoch 56/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.7162 - accuracy: 0.7565 - val_loss: 0.6781 - val_accuracy: 0.7500\n",
      "Epoch 57/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.7085 - accuracy: 0.7602 - val_loss: 0.6719 - val_accuracy: 0.7583\n",
      "Epoch 58/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.7007 - accuracy: 0.7630 - val_loss: 0.6660 - val_accuracy: 0.7667\n",
      "Epoch 59/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6935 - accuracy: 0.7657 - val_loss: 0.6607 - val_accuracy: 0.7583\n",
      "Epoch 60/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6863 - accuracy: 0.7676 - val_loss: 0.6558 - val_accuracy: 0.7583\n",
      "Epoch 61/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 0.6799 - accuracy: 0.7694 - val_loss: 0.6511 - val_accuracy: 0.7750\n",
      "Epoch 62/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6734 - accuracy: 0.7694 - val_loss: 0.6456 - val_accuracy: 0.7750\n",
      "Epoch 63/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6667 - accuracy: 0.7722 - val_loss: 0.6411 - val_accuracy: 0.7833\n",
      "Epoch 64/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6605 - accuracy: 0.7694 - val_loss: 0.6366 - val_accuracy: 0.7750\n",
      "Epoch 65/100\n",
      "17/17 [==============================] - 2s 102ms/step - loss: 0.6543 - accuracy: 0.7731 - val_loss: 0.6328 - val_accuracy: 0.7750\n",
      "Epoch 66/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6485 - accuracy: 0.7750 - val_loss: 0.6289 - val_accuracy: 0.7750\n",
      "Epoch 67/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6429 - accuracy: 0.7778 - val_loss: 0.6249 - val_accuracy: 0.7750\n",
      "Epoch 68/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6373 - accuracy: 0.7778 - val_loss: 0.6214 - val_accuracy: 0.7750\n",
      "Epoch 69/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 0.6318 - accuracy: 0.7806 - val_loss: 0.6178 - val_accuracy: 0.7833\n",
      "Epoch 70/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6265 - accuracy: 0.7815 - val_loss: 0.6145 - val_accuracy: 0.7833\n",
      "Epoch 71/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6213 - accuracy: 0.7852 - val_loss: 0.6114 - val_accuracy: 0.7917\n",
      "Epoch 72/100\n",
      "17/17 [==============================] - 2s 100ms/step - loss: 0.6162 - accuracy: 0.7861 - val_loss: 0.6086 - val_accuracy: 0.7917\n",
      "Epoch 73/100\n",
      "17/17 [==============================] - 2s 101ms/step - loss: 0.6114 - accuracy: 0.7907 - val_loss: 0.6060 - val_accuracy: 0.7750\n",
      "Epoch 74/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6066 - accuracy: 0.7917 - val_loss: 0.6034 - val_accuracy: 0.7750\n",
      "Epoch 75/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.6020 - accuracy: 0.7907 - val_loss: 0.6003 - val_accuracy: 0.7750\n",
      "Epoch 76/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5974 - accuracy: 0.7917 - val_loss: 0.5972 - val_accuracy: 0.7750\n",
      "Epoch 77/100\n",
      "17/17 [==============================] - 2s 101ms/step - loss: 0.5929 - accuracy: 0.7926 - val_loss: 0.5941 - val_accuracy: 0.7750\n",
      "Epoch 78/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5887 - accuracy: 0.7954 - val_loss: 0.5912 - val_accuracy: 0.7750\n",
      "Epoch 79/100\n",
      "17/17 [==============================] - 2s 101ms/step - loss: 0.5846 - accuracy: 0.7981 - val_loss: 0.5884 - val_accuracy: 0.7750\n",
      "Epoch 80/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5803 - accuracy: 0.8000 - val_loss: 0.5855 - val_accuracy: 0.7750\n",
      "Epoch 81/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 0.5760 - accuracy: 0.8019 - val_loss: 0.5828 - val_accuracy: 0.7750\n",
      "Epoch 82/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5719 - accuracy: 0.8028 - val_loss: 0.5804 - val_accuracy: 0.7750\n",
      "Epoch 83/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5679 - accuracy: 0.8056 - val_loss: 0.5777 - val_accuracy: 0.7750\n",
      "Epoch 84/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5638 - accuracy: 0.8056 - val_loss: 0.5753 - val_accuracy: 0.7833\n",
      "Epoch 85/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5598 - accuracy: 0.8074 - val_loss: 0.5731 - val_accuracy: 0.7833\n",
      "Epoch 86/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5560 - accuracy: 0.8093 - val_loss: 0.5703 - val_accuracy: 0.7833\n",
      "Epoch 87/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5520 - accuracy: 0.8111 - val_loss: 0.5676 - val_accuracy: 0.7833\n",
      "Epoch 88/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5481 - accuracy: 0.8130 - val_loss: 0.5657 - val_accuracy: 0.7833\n",
      "Epoch 89/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5442 - accuracy: 0.8120 - val_loss: 0.5634 - val_accuracy: 0.7917\n",
      "Epoch 90/100\n",
      "17/17 [==============================] - 2s 112ms/step - loss: 0.5406 - accuracy: 0.8130 - val_loss: 0.5609 - val_accuracy: 0.7917\n",
      "Epoch 91/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 0.5367 - accuracy: 0.8139 - val_loss: 0.5588 - val_accuracy: 0.7917\n",
      "Epoch 92/100\n",
      "17/17 [==============================] - 2s 101ms/step - loss: 0.5332 - accuracy: 0.8139 - val_loss: 0.5565 - val_accuracy: 0.7917\n",
      "Epoch 93/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5298 - accuracy: 0.8157 - val_loss: 0.5542 - val_accuracy: 0.7917\n",
      "Epoch 94/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 0.5263 - accuracy: 0.8167 - val_loss: 0.5516 - val_accuracy: 0.7917\n",
      "Epoch 95/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 0.5230 - accuracy: 0.8185 - val_loss: 0.5498 - val_accuracy: 0.7917\n",
      "Epoch 96/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5197 - accuracy: 0.8194 - val_loss: 0.5474 - val_accuracy: 0.7917\n",
      "Epoch 97/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5163 - accuracy: 0.8222 - val_loss: 0.5454 - val_accuracy: 0.7917\n",
      "Epoch 98/100\n",
      "17/17 [==============================] - 2s 107ms/step - loss: 0.5130 - accuracy: 0.8231 - val_loss: 0.5433 - val_accuracy: 0.7917\n",
      "Epoch 99/100\n",
      "17/17 [==============================] - 2s 111ms/step - loss: 0.5097 - accuracy: 0.8241 - val_loss: 0.5413 - val_accuracy: 0.7917\n",
      "Epoch 100/100\n",
      "17/17 [==============================] - 2s 106ms/step - loss: 0.5061 - accuracy: 0.8278 - val_loss: 0.5391 - val_accuracy: 0.7917\n"
     ]
    }
   ],
   "source": [
    "train_dataset = tf.data.Dataset.from_tensor_slices((X_train, Y_train)).batch(64)\n",
    "test_dataset = tf.data.Dataset.from_tensor_slices((X_test, Y_test)).batch(64)\n",
    "history = conv_model.fit(train_dataset, epochs=100, validation_data=test_dataset)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='5'></a>\n",
    "## 5 - History Object \n",
    "\n",
    "The history object is an output of the `.fit()` operation, and provides a record of all the loss and metric values in memory. It's stored as a dictionary that you can retrieve at `history.history`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'loss': [1.7916251420974731,\n",
       "  1.7862857580184937,\n",
       "  1.7825326919555664,\n",
       "  1.7786587476730347,\n",
       "  1.7736133337020874,\n",
       "  1.7654858827590942,\n",
       "  1.7581855058670044,\n",
       "  1.7496548891067505,\n",
       "  1.7392022609710693,\n",
       "  1.725744366645813,\n",
       "  1.7106963396072388,\n",
       "  1.69416081905365,\n",
       "  1.6756823062896729,\n",
       "  1.6552592515945435,\n",
       "  1.6322752237319946,\n",
       "  1.6083699464797974,\n",
       "  1.5825309753417969,\n",
       "  1.5554523468017578,\n",
       "  1.5259124040603638,\n",
       "  1.492828369140625,\n",
       "  1.4616485834121704,\n",
       "  1.4265837669372559,\n",
       "  1.3898494243621826,\n",
       "  1.3511723279953003,\n",
       "  1.3131057024002075,\n",
       "  1.2762900590896606,\n",
       "  1.2409746646881104,\n",
       "  1.2065644264221191,\n",
       "  1.1731759309768677,\n",
       "  1.1412765979766846,\n",
       "  1.1105705499649048,\n",
       "  1.0817667245864868,\n",
       "  1.0544136762619019,\n",
       "  1.0286225080490112,\n",
       "  1.0044499635696411,\n",
       "  0.9816069602966309,\n",
       "  0.9602313041687012,\n",
       "  0.9400836825370789,\n",
       "  0.9212688207626343,\n",
       "  0.9033963084220886,\n",
       "  0.8867060542106628,\n",
       "  0.8708075284957886,\n",
       "  0.8558682799339294,\n",
       "  0.8416670560836792,\n",
       "  0.8282781839370728,\n",
       "  0.815536379814148,\n",
       "  0.803487241268158,\n",
       "  0.7918947339057922,\n",
       "  0.7809689044952393,\n",
       "  0.7702463865280151,\n",
       "  0.7602500319480896,\n",
       "  0.7507146596908569,\n",
       "  0.7416475415229797,\n",
       "  0.732699453830719,\n",
       "  0.7243492007255554,\n",
       "  0.7162162065505981,\n",
       "  0.708518922328949,\n",
       "  0.7007461786270142,\n",
       "  0.6935182213783264,\n",
       "  0.686307430267334,\n",
       "  0.6799108982086182,\n",
       "  0.6734449863433838,\n",
       "  0.6667031645774841,\n",
       "  0.6604892015457153,\n",
       "  0.6543348431587219,\n",
       "  0.6485146880149841,\n",
       "  0.6428515315055847,\n",
       "  0.6372718214988708,\n",
       "  0.6317844390869141,\n",
       "  0.6265222430229187,\n",
       "  0.6213239431381226,\n",
       "  0.6162309050559998,\n",
       "  0.6114277243614197,\n",
       "  0.6066394448280334,\n",
       "  0.6019787192344666,\n",
       "  0.5973672270774841,\n",
       "  0.5929251313209534,\n",
       "  0.5887408256530762,\n",
       "  0.584649920463562,\n",
       "  0.5803070068359375,\n",
       "  0.5760480165481567,\n",
       "  0.5719406008720398,\n",
       "  0.5679142475128174,\n",
       "  0.5638105869293213,\n",
       "  0.5598191618919373,\n",
       "  0.5559806823730469,\n",
       "  0.5519587397575378,\n",
       "  0.5481192469596863,\n",
       "  0.5442457795143127,\n",
       "  0.5405552387237549,\n",
       "  0.5367312431335449,\n",
       "  0.5332027077674866,\n",
       "  0.5297877788543701,\n",
       "  0.5263287425041199,\n",
       "  0.522975742816925,\n",
       "  0.5196617245674133,\n",
       "  0.5163421630859375,\n",
       "  0.5130255222320557,\n",
       "  0.509671151638031,\n",
       "  0.5060620307922363],\n",
       " 'accuracy': [0.18703703582286835,\n",
       "  0.23981481790542603,\n",
       "  0.2638888955116272,\n",
       "  0.25648146867752075,\n",
       "  0.31296294927597046,\n",
       "  0.29907408356666565,\n",
       "  0.3324074149131775,\n",
       "  0.35740742087364197,\n",
       "  0.36666667461395264,\n",
       "  0.4027777910232544,\n",
       "  0.4296296238899231,\n",
       "  0.43981480598449707,\n",
       "  0.43888887763023376,\n",
       "  0.4416666626930237,\n",
       "  0.45370370149612427,\n",
       "  0.46481481194496155,\n",
       "  0.4740740656852722,\n",
       "  0.47592592239379883,\n",
       "  0.4962962865829468,\n",
       "  0.5046296119689941,\n",
       "  0.5120370388031006,\n",
       "  0.5277777910232544,\n",
       "  0.5490740537643433,\n",
       "  0.5694444179534912,\n",
       "  0.5814814567565918,\n",
       "  0.5925925970077515,\n",
       "  0.6064814925193787,\n",
       "  0.614814817905426,\n",
       "  0.625,\n",
       "  0.6342592835426331,\n",
       "  0.6490740776062012,\n",
       "  0.6583333611488342,\n",
       "  0.6620370149612427,\n",
       "  0.6685185432434082,\n",
       "  0.675000011920929,\n",
       "  0.6814814805984497,\n",
       "  0.6824073791503906,\n",
       "  0.6870370507240295,\n",
       "  0.6925926208496094,\n",
       "  0.6981481313705444,\n",
       "  0.7046296000480652,\n",
       "  0.7074074149131775,\n",
       "  0.7138888835906982,\n",
       "  0.7185184955596924,\n",
       "  0.7185184955596924,\n",
       "  0.7212963104248047,\n",
       "  0.7250000238418579,\n",
       "  0.7277777791023254,\n",
       "  0.730555534362793,\n",
       "  0.7342592477798462,\n",
       "  0.739814817905426,\n",
       "  0.7435185313224792,\n",
       "  0.7481481432914734,\n",
       "  0.75,\n",
       "  0.7537037134170532,\n",
       "  0.7564814686775208,\n",
       "  0.760185182094574,\n",
       "  0.7629629373550415,\n",
       "  0.7657407522201538,\n",
       "  0.7675926089286804,\n",
       "  0.769444465637207,\n",
       "  0.769444465637207,\n",
       "  0.7722222208976746,\n",
       "  0.769444465637207,\n",
       "  0.7731481194496155,\n",
       "  0.7749999761581421,\n",
       "  0.7777777910232544,\n",
       "  0.7777777910232544,\n",
       "  0.7805555462837219,\n",
       "  0.7814815044403076,\n",
       "  0.7851851582527161,\n",
       "  0.7861111164093018,\n",
       "  0.7907407283782959,\n",
       "  0.7916666865348816,\n",
       "  0.7907407283782959,\n",
       "  0.7916666865348816,\n",
       "  0.7925925850868225,\n",
       "  0.7953703999519348,\n",
       "  0.7981481552124023,\n",
       "  0.800000011920929,\n",
       "  0.8018518686294556,\n",
       "  0.8027777671813965,\n",
       "  0.8055555820465088,\n",
       "  0.8055555820465088,\n",
       "  0.8074073791503906,\n",
       "  0.8092592358589172,\n",
       "  0.8111110925674438,\n",
       "  0.8129629492759705,\n",
       "  0.8120370507240295,\n",
       "  0.8129629492759705,\n",
       "  0.8138889074325562,\n",
       "  0.8138889074325562,\n",
       "  0.8157407641410828,\n",
       "  0.8166666626930237,\n",
       "  0.8185185194015503,\n",
       "  0.8194444179534912,\n",
       "  0.8222222328186035,\n",
       "  0.8231481313705444,\n",
       "  0.8240740895271301,\n",
       "  0.8277778029441833],\n",
       " 'val_loss': [1.7873191833496094,\n",
       "  1.783528447151184,\n",
       "  1.7798078060150146,\n",
       "  1.774997591972351,\n",
       "  1.7673145532608032,\n",
       "  1.7587814331054688,\n",
       "  1.7509119510650635,\n",
       "  1.7406119108200073,\n",
       "  1.7271825075149536,\n",
       "  1.7101988792419434,\n",
       "  1.6923648118972778,\n",
       "  1.673086166381836,\n",
       "  1.6523457765579224,\n",
       "  1.6291272640228271,\n",
       "  1.6040812730789185,\n",
       "  1.5740267038345337,\n",
       "  1.5460795164108276,\n",
       "  1.5139029026031494,\n",
       "  1.4781509637832642,\n",
       "  1.4390408992767334,\n",
       "  1.4032585620880127,\n",
       "  1.3640230894088745,\n",
       "  1.3244788646697998,\n",
       "  1.2846944332122803,\n",
       "  1.2433929443359375,\n",
       "  1.2054837942123413,\n",
       "  1.1690387725830078,\n",
       "  1.1351737976074219,\n",
       "  1.10310697555542,\n",
       "  1.072661280632019,\n",
       "  1.0439553260803223,\n",
       "  1.0163072347640991,\n",
       "  0.9903592467308044,\n",
       "  0.9662018418312073,\n",
       "  0.9433053135871887,\n",
       "  0.9215010404586792,\n",
       "  0.9011276364326477,\n",
       "  0.8821094632148743,\n",
       "  0.8643171787261963,\n",
       "  0.8475474119186401,\n",
       "  0.8316938877105713,\n",
       "  0.8169143795967102,\n",
       "  0.8028188347816467,\n",
       "  0.7898568511009216,\n",
       "  0.7777238488197327,\n",
       "  0.7659751176834106,\n",
       "  0.7548860907554626,\n",
       "  0.7439525723457336,\n",
       "  0.733971893787384,\n",
       "  0.7242984771728516,\n",
       "  0.7153758406639099,\n",
       "  0.7071148157119751,\n",
       "  0.699377715587616,\n",
       "  0.6917678117752075,\n",
       "  0.684906005859375,\n",
       "  0.6780877709388733,\n",
       "  0.6719324588775635,\n",
       "  0.6659749150276184,\n",
       "  0.6607257723808289,\n",
       "  0.6557580232620239,\n",
       "  0.6510919332504272,\n",
       "  0.645629346370697,\n",
       "  0.6410506963729858,\n",
       "  0.6366450190544128,\n",
       "  0.6327649354934692,\n",
       "  0.6288592219352722,\n",
       "  0.624945342540741,\n",
       "  0.6213710904121399,\n",
       "  0.6178109645843506,\n",
       "  0.6144906282424927,\n",
       "  0.6113622188568115,\n",
       "  0.608586311340332,\n",
       "  0.6060190796852112,\n",
       "  0.6033939123153687,\n",
       "  0.6003419160842896,\n",
       "  0.5972157716751099,\n",
       "  0.5941280126571655,\n",
       "  0.5912075638771057,\n",
       "  0.588412344455719,\n",
       "  0.5855454802513123,\n",
       "  0.5828122496604919,\n",
       "  0.5803757905960083,\n",
       "  0.5777413845062256,\n",
       "  0.5752855539321899,\n",
       "  0.5731011629104614,\n",
       "  0.570303201675415,\n",
       "  0.5676034092903137,\n",
       "  0.5656919479370117,\n",
       "  0.5633500814437866,\n",
       "  0.5608533024787903,\n",
       "  0.5587974786758423,\n",
       "  0.5565033555030823,\n",
       "  0.554172158241272,\n",
       "  0.551609992980957,\n",
       "  0.5497931838035583,\n",
       "  0.5473730564117432,\n",
       "  0.5453693270683289,\n",
       "  0.5433372259140015,\n",
       "  0.5413405299186707,\n",
       "  0.5390950441360474],\n",
       " 'val_accuracy': [0.2083333283662796,\n",
       "  0.28333333134651184,\n",
       "  0.25833332538604736,\n",
       "  0.3166666626930237,\n",
       "  0.3333333432674408,\n",
       "  0.3333333432674408,\n",
       "  0.36666667461395264,\n",
       "  0.44999998807907104,\n",
       "  0.4416666626930237,\n",
       "  0.4583333432674408,\n",
       "  0.49166667461395264,\n",
       "  0.4833333194255829,\n",
       "  0.4833333194255829,\n",
       "  0.5,\n",
       "  0.5166666507720947,\n",
       "  0.5416666865348816,\n",
       "  0.5333333611488342,\n",
       "  0.5333333611488342,\n",
       "  0.550000011920929,\n",
       "  0.6000000238418579,\n",
       "  0.5833333134651184,\n",
       "  0.6000000238418579,\n",
       "  0.6083333492279053,\n",
       "  0.6083333492279053,\n",
       "  0.6083333492279053,\n",
       "  0.6083333492279053,\n",
       "  0.625,\n",
       "  0.6499999761581421,\n",
       "  0.6666666865348816,\n",
       "  0.6666666865348816,\n",
       "  0.6666666865348816,\n",
       "  0.6499999761581421,\n",
       "  0.6499999761581421,\n",
       "  0.675000011920929,\n",
       "  0.6666666865348816,\n",
       "  0.6833333373069763,\n",
       "  0.6833333373069763,\n",
       "  0.6833333373069763,\n",
       "  0.6833333373069763,\n",
       "  0.699999988079071,\n",
       "  0.699999988079071,\n",
       "  0.699999988079071,\n",
       "  0.7083333134651184,\n",
       "  0.7083333134651184,\n",
       "  0.7083333134651184,\n",
       "  0.7166666388511658,\n",
       "  0.7166666388511658,\n",
       "  0.7166666388511658,\n",
       "  0.7166666388511658,\n",
       "  0.7166666388511658,\n",
       "  0.7250000238418579,\n",
       "  0.7416666746139526,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.75,\n",
       "  0.7583333253860474,\n",
       "  0.7666666507720947,\n",
       "  0.7583333253860474,\n",
       "  0.7583333253860474,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7833333611488342,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7833333611488342,\n",
       "  0.7833333611488342,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7749999761581421,\n",
       "  0.7833333611488342,\n",
       "  0.7833333611488342,\n",
       "  0.7833333611488342,\n",
       "  0.7833333611488342,\n",
       "  0.7833333611488342,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816,\n",
       "  0.7916666865348816]}"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "history.history"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now visualize the loss over time using `history.history`: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(0, 0.5, 'Accuracy'), Text(0.5, 0, 'Epoch')]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# The history.history[\"loss\"] entry is a dictionary with as many values as epochs that the\n",
    "# model was trained on. \n",
    "df_loss_acc = pd.DataFrame(history.history)\n",
    "df_loss= df_loss_acc[['loss','val_loss']]\n",
    "df_loss.rename(columns={'loss':'train','val_loss':'validation'},inplace=True)\n",
    "df_acc= df_loss_acc[['accuracy','val_accuracy']]\n",
    "df_acc.rename(columns={'accuracy':'train','val_accuracy':'validation'},inplace=True)\n",
    "df_loss.plot(title='Model loss',figsize=(12,8)).set(xlabel='Epoch',ylabel='Loss')\n",
    "df_acc.plot(title='Model Accuracy',figsize=(12,8)).set(xlabel='Epoch',ylabel='Accuracy')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Congratulations**! You've finished the assignment and built two models: One that recognizes  smiles, and another that recognizes SIGN language with almost 80% accuracy on the test set. In addition to that, you now also understand the applications of two Keras APIs: Sequential and Functional. Nicely done! \n",
    "\n",
    "By now, you know a bit about how the Functional API works and may have glimpsed the possibilities. In your next assignment, you'll really get a feel for its power when you get the opportunity to build a very deep ConvNet, using ResNets! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a name='6'></a>\n",
    "## 6 - Bibliography\n",
    "\n",
    "You're always encouraged to read the official documentation. To that end, you can find the docs for the Sequential and Functional APIs here: \n",
    "\n",
    "https://www.tensorflow.org/guide/keras/sequential_model\n",
    "\n",
    "https://www.tensorflow.org/guide/keras/functional"
   ]
  }
 ],
 "metadata": {
  "coursera": {
   "course_slug": "convolutional-neural-networks",
   "graded_item_id": "bwbJV",
   "launcher_item_id": "0TkXB"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
